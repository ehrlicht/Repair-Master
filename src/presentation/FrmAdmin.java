package presentation;

import base.RepairDao;
import base.UserDao;
import domaine.Repair;
import domaine.User;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import metier.ListeObjects;
import static presentation.FrmMain.VENDOR_COUNTRY;
import static presentation.FrmMain.VENDOR_ID;

/**
 * FrmAdmin permet d'afficher l'interface de gestion des utilisateurs et des
 * réparations. 
 * 
 * Fonctionnalités de l'onglet de gestion des réparations: 
 * - Ajouter une réparation à la liste des réparations gratuites 
 * - Retirer une réparation de la liste des réparations gratuites la rendant à 
 *   nouveau payante
 *
 * Fonctionnalités de l'onglet de gestion des utilisateurs: 
 * - Accepter / refuser l'accès à un employé 
 * - Attribuer / changer le role d'un utilisateur accepté 
 * - Supprimer l'accès pour un utilisateur
 *
 * @author Thery Ehrlich
 */
public class FrmAdmin extends javax.swing.JFrame {

    private static final String REGISTERED = "Y";
    private static final String UNREGISTERED = "N";
    private static final String MANAGER_ROLE = "Manager";
    private static final String TECHNICIAN_ROLE = "Technicien";
    private static final String NO_ROLE = "Aucun";
    private static final String FREE_REPAIR = "Y";
    private static final String PAID_REPAIR = "N";
    private ListeObjects lstUsers;
    private ListeObjects lstRepairs;
    private final ArrayList<User> lstPendingUsers = new ArrayList<>();
    private final ArrayList<User> lstAcceptedUsers = new ArrayList<>();
    private final ArrayList<User> lstRemovedUsers = new ArrayList<>();
    private final ArrayList<Repair> lstFreeRepairs = new ArrayList<>();
    private final ArrayList<Repair> lstPaidRepairs = new ArrayList<>();
    private FrmLogin frmLogin;
    DefaultTableModel freeModel;
    DefaultTableModel paidModel;
    DefaultTableModel acsModel;
    DefaultTableModel reqModel;

    /**
     * Creates new form FrmAdmin
     *
     * Deux constructeurs sont nécessaires pour éviter une boucle d'assignation
     * entre les Frames
     *
     * @param frmLogin
     */
    public FrmAdmin(FrmLogin frmLogin) {
        initComponents();
        initTheRest();
        this.frmLogin = frmLogin;
    }

    public FrmAdmin() {
        initComponents();
        initTheRest();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupRoles = new javax.swing.ButtonGroup();
        label1 = new java.awt.Label();
        lblRepair = new javax.swing.JLabel();
        lblMaster = new javax.swing.JLabel();
        sepRepMas = new javax.swing.JSeparator();
        btnLogout = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();
        pnlExceptionManager = new javax.swing.JPanel();
        lblExceptionManager = new javax.swing.JLabel();
        sepExceptionManager = new javax.swing.JSeparator();
        pnlListLayout = new javax.swing.JPanel();
        pnlPayable = new javax.swing.JPanel();
        lblPaid = new javax.swing.JLabel();
        scpPaid = new javax.swing.JScrollPane();
        tblPaid = new javax.swing.JTable();
        pnlButtons = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        pnlFree = new javax.swing.JPanel();
        lblFree = new javax.swing.JLabel();
        scpFree = new javax.swing.JScrollPane();
        tblFree = new javax.swing.JTable();
        pnlUserManager = new javax.swing.JPanel();
        lblUserManager = new javax.swing.JLabel();
        sepUserManager = new javax.swing.JSeparator();
        lblAccessRequests = new javax.swing.JLabel();
        scpAccessRequests = new javax.swing.JScrollPane();
        tblAccessRequests = new javax.swing.JTable();
        btnAccept = new javax.swing.JButton();
        btnRefuse = new javax.swing.JButton();
        sepSubPanels = new javax.swing.JSeparator();
        lblRoleManager = new javax.swing.JLabel();
        scpRoleManager = new javax.swing.JScrollPane();
        tblRoleManager = new javax.swing.JTable();
        lblRole = new javax.swing.JLabel();
        optTechnician = new javax.swing.JRadioButton();
        optManager = new javax.swing.JRadioButton();
        btnChangeRole = new javax.swing.JButton();
        btnDeleteUser = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();
        mnuAdmin = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        mnuLogout = new javax.swing.JMenuItem();
        mnuQuit = new javax.swing.JMenuItem();

        label1.setText("label1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Repair Admin");
        setLocation(new java.awt.Point(600, 200));
        setMinimumSize(new java.awt.Dimension(650, 750));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblRepair.setFont(new java.awt.Font("Helvetica Neue", 0, 41)); // NOI18N
        lblRepair.setText("Repair");

        lblMaster.setFont(new java.awt.Font("Helvetica Neue", 0, 41)); // NOI18N
        lblMaster.setForeground(new java.awt.Color(0, 102, 255));
        lblMaster.setText("Admin");

        btnLogout.setMnemonic('d');
        btnLogout.setText("Se déconnecter");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        tabs.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 14)); // NOI18N

        pnlExceptionManager.setBackground(new java.awt.Color(255, 255, 255));

        lblExceptionManager.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblExceptionManager.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblExceptionManager.setText("Gestion des exceptions");

        pnlListLayout.setBackground(new java.awt.Color(255, 255, 255));
        pnlListLayout.setPreferredSize(new java.awt.Dimension(634, 750));
        pnlListLayout.setLayout(new javax.swing.BoxLayout(pnlListLayout, javax.swing.BoxLayout.LINE_AXIS));

        pnlPayable.setBackground(new java.awt.Color(255, 255, 255));
        pnlPayable.setLayout(new javax.swing.BoxLayout(pnlPayable, javax.swing.BoxLayout.PAGE_AXIS));

        lblPaid.setBackground(new java.awt.Color(255, 255, 255));
        lblPaid.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPaid.setText("Réparations Payantes :");
        pnlPayable.add(lblPaid);

        tblPaid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° réparation", "Client"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPaid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPaidMouseClicked(evt);
            }
        });
        scpPaid.setViewportView(tblPaid);

        pnlPayable.add(scpPaid);

        pnlListLayout.add(pnlPayable);

        pnlButtons.setBackground(new java.awt.Color(255, 255, 255));

        btnAdd.setMnemonic('a');
        btnAdd.setText("Ajouter >");
        btnAdd.setToolTipText("Appuyer pour passer une réparation a CHF 0.-.");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(255, 255, 255));
        btnRemove.setMnemonic('r');
        btnRemove.setText("< Retirer");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemove)
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove)
                .addContainerGap())
        );

        pnlListLayout.add(pnlButtons);

        pnlFree.setBackground(new java.awt.Color(255, 255, 255));
        pnlFree.setLayout(new javax.swing.BoxLayout(pnlFree, javax.swing.BoxLayout.PAGE_AXIS));

        lblFree.setBackground(new java.awt.Color(255, 255, 255));
        lblFree.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFree.setText("Réparations gratuites :");
        pnlFree.add(lblFree);

        tblFree.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° réparation", "Client"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFreeMouseClicked(evt);
            }
        });
        scpFree.setViewportView(tblFree);

        pnlFree.add(scpFree);

        pnlListLayout.add(pnlFree);

        javax.swing.GroupLayout pnlExceptionManagerLayout = new javax.swing.GroupLayout(pnlExceptionManager);
        pnlExceptionManager.setLayout(pnlExceptionManagerLayout);
        pnlExceptionManagerLayout.setHorizontalGroup(
            pnlExceptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlExceptionManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlExceptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlListLayout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addComponent(sepExceptionManager)
                    .addComponent(lblExceptionManager, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlExceptionManagerLayout.setVerticalGroup(
            pnlExceptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlExceptionManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblExceptionManager)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sepExceptionManager, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlListLayout, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("Gestion des exceptions", pnlExceptionManager);

        pnlUserManager.setBackground(new java.awt.Color(255, 255, 255));

        lblUserManager.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblUserManager.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUserManager.setText("Gestion des utilisateurs");

        lblAccessRequests.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAccessRequests.setText("Demandes d'accès :");

        tblAccessRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Prénom", "Nom d'utilisateur", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAccessRequests.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAccessRequestsMouseClicked(evt);
            }
        });
        scpAccessRequests.setViewportView(tblAccessRequests);

        btnAccept.setMnemonic('c');
        btnAccept.setText("Accepter");
        btnAccept.setEnabled(false);
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnRefuse.setMnemonic('r');
        btnRefuse.setText("Refuser");
        btnRefuse.setEnabled(false);
        btnRefuse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefuseActionPerformed(evt);
            }
        });

        lblRoleManager.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRoleManager.setText("Gestion des rôles :");

        tblRoleManager.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Prénom", "Nom d'utilisateur", "Email", "Rôle"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRoleManager.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblRoleManager.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRoleManagerMouseClicked(evt);
            }
        });
        scpRoleManager.setViewportView(tblRoleManager);
        if (tblRoleManager.getColumnModel().getColumnCount() > 0) {
            tblRoleManager.getColumnModel().getColumn(3).setMinWidth(150);
            tblRoleManager.getColumnModel().getColumn(3).setPreferredWidth(150);
            tblRoleManager.getColumnModel().getColumn(4).setMinWidth(50);
            tblRoleManager.getColumnModel().getColumn(4).setPreferredWidth(50);
        }

        lblRole.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRole.setText("Rôle :");

        optTechnician.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroupRoles.add(optTechnician);
        optTechnician.setMnemonic('t');
        optTechnician.setSelected(true);
        optTechnician.setText("Technicien");
        optTechnician.setEnabled(false);
        optTechnician.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleChangeActionPerformed(evt);
            }
        });

        optManager.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroupRoles.add(optManager);
        optManager.setMnemonic('g');
        optManager.setText("Manager");
        optManager.setEnabled(false);
        optManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleChangeActionPerformed(evt);
            }
        });

        btnChangeRole.setMnemonic('m');
        btnChangeRole.setText("Modifier le rôle");
        btnChangeRole.setEnabled(false);
        btnChangeRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeRoleActionPerformed(evt);
            }
        });

        btnDeleteUser.setMnemonic('s');
        btnDeleteUser.setText("Supprimer l'utilisateur");
        btnDeleteUser.setEnabled(false);
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlUserManagerLayout = new javax.swing.GroupLayout(pnlUserManager);
        pnlUserManager.setLayout(pnlUserManagerLayout);
        pnlUserManagerLayout.setHorizontalGroup(
            pnlUserManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUserManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUserManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAccessRequests, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scpAccessRequests, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scpRoleManager)
                    .addComponent(sepUserManager, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblUserManager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlUserManagerLayout.createSequentialGroup()
                        .addComponent(lblRole)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(optTechnician)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(optManager)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnChangeRole)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteUser))
                    .addComponent(lblRoleManager, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sepSubPanels)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUserManagerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAccept)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefuse)))
                .addContainerGap())
        );
        pnlUserManagerLayout.setVerticalGroup(
            pnlUserManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUserManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUserManager)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sepUserManager, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(lblAccessRequests)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpAccessRequests, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefuse)
                    .addComponent(btnAccept))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sepSubPanels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRoleManager)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpRoleManager, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRole)
                    .addComponent(optTechnician)
                    .addComponent(optManager)
                    .addComponent(btnChangeRole)
                    .addComponent(btnDeleteUser))
                .addContainerGap())
        );

        tabs.addTab("Gestion des utilisateurs", pnlUserManager);

        btnSave.setMnemonic('e');
        btnSave.setText("Enregistrer");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setMnemonic('n');
        btnCancel.setText("Annuler les modifications");
        btnCancel.setEnabled(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnQuit.setMnemonic('q');
        btnQuit.setText("Quitter");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        mnuFile.setMnemonic('f');
        mnuFile.setText("Fichier");
        mnuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setMnemonic('e');
        jMenuItem1.setText("Enregistrer");
        mnuFile.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem2.setMnemonic('a');
        jMenuItem2.setText("Annuler les modifiactions");
        mnuFile.add(jMenuItem2);

        mnuLogout.setMnemonic('d');
        mnuLogout.setText("Se deconnecter...");
        mnuLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLogoutActionPerformed(evt);
            }
        });
        mnuFile.add(mnuLogout);

        mnuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mnuQuit.setMnemonic('q');
        mnuQuit.setText("Quitter");
        mnuQuit.setToolTipText("");
        mnuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuQuitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuQuit);

        mnuAdmin.add(mnuFile);

        setJMenuBar(mnuAdmin);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblRepair)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMaster)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tabs, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sepRepMas, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnLogout)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnQuit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSave)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMaster)
                    .addComponent(lblRepair, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sepRepMas, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogout)
                    .addComponent(btnSave)
                    .addComponent(btnCancel)
                    .addComponent(btnQuit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        this.dispose();
        frmLogin = new FrmLogin();
        frmLogin.setVisible(true);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        DiaQuit diaQuit = new DiaQuit(this, true);
        diaQuit.setParent(this);
        diaQuit.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void mnuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileActionPerformed
        this.dispose();
        frmLogin.setVisible(true);
    }//GEN-LAST:event_mnuFileActionPerformed

    private void mnuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuQuitActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnQuitActionPerformed

    private void mnuLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLogoutActionPerformed
        this.dispose();
        frmLogin.setVisible(true);
    }//GEN-LAST:event_mnuLogoutActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        int index = tblAccessRequests.getSelectedRow();
        lstPendingUsers.get(index).setStatus(REGISTERED);
        lstAcceptedUsers.add(lstPendingUsers.get(index));
        lstPendingUsers.remove(index);
        btnAccept.setEnabled(false);
        btnRefuse.setEnabled(false);
        btnSave.setEnabled(true);
        btnCancel.setEnabled(true);
        displayUserLists();
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void tblAccessRequestsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAccessRequestsMouseClicked
        btnAccept.setEnabled(true);
        btnRefuse.setEnabled(true);
    }//GEN-LAST:event_tblAccessRequestsMouseClicked
    
    //Gère le bouton radio de rôle selectionné en fonction de l'utilisateur selectionné
    private void tblRoleManagerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRoleManagerMouseClicked
        btnChangeRole.setEnabled(false);
        optManager.setEnabled(true);
        optTechnician.setEnabled(true);
        int index = tblRoleManager.getSelectedRow();
        String roleName = tblRoleManager.getValueAt(index, 4).toString();
        btnDeleteUser.setEnabled(true);
        optManager.setEnabled(true);
        optTechnician.setEnabled(true);
        switch (tblRoleManager.getValueAt(index, 4).toString()) {
            case MANAGER_ROLE:
                optManager.setSelected(true);
                break;
            case TECHNICIAN_ROLE:
                optTechnician.setSelected(true);
                break;
            case NO_ROLE:
                optTechnician.setSelected(true);
                break;
        }
        if (roleName.equals(NO_ROLE)) {
            btnChangeRole.setEnabled(true);
        }
        btnRemove.setEnabled(true);
    }//GEN-LAST:event_tblRoleManagerMouseClicked

    /* Gère le changement de rôles pour un utilisateur et grise le bouton de 
     * modification si aucune modification n'a été apportée.
     */
    private void roleChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleChangeActionPerformed
        int index = tblRoleManager.getSelectedRow();
        String roleName = tblRoleManager.getValueAt(index, 4).toString();
        System.out.println(roleName.equals(MANAGER_ROLE) && !optManager.isSelected());
        if (roleName.equals(MANAGER_ROLE) && !optManager.isSelected() || roleName.equals(TECHNICIAN_ROLE) && !optTechnician.isSelected()) {
            btnChangeRole.setEnabled(true);
        } else {
            btnChangeRole.setEnabled(false);
        }
        if (roleName.equals(NO_ROLE)) {
            btnChangeRole.setEnabled(true);
        }
    }//GEN-LAST:event_roleChangeActionPerformed

    private void btnRefuseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefuseActionPerformed
        int index = tblAccessRequests.getSelectedRow();
        frmLogin.addRejectedUser(lstPendingUsers.get(index));
        lstRemovedUsers.add(lstPendingUsers.get(index));
        lstPendingUsers.remove(index);
        btnRefuse.setEnabled(false);
        btnAccept.setEnabled(false);
        btnSave.setEnabled(true);
        btnCancel.setEnabled(true);
        displayUserLists();
    }//GEN-LAST:event_btnRefuseActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        removeUsers();
        updateExistingUsers();
        updateRepairCosts();
        loadRepairList();
        loadRepairSubLists();
        displayRepairLists();
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
        optManager.setEnabled(false);
        optTechnician.setEnabled(false);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        int index = tblRoleManager.getSelectedRow();
        lstRemovedUsers.add(lstAcceptedUsers.get(index));
        lstAcceptedUsers.remove(index);
        displayUserLists();
        btnDeleteUser.setEnabled(false);
        btnSave.setEnabled(true);
        btnCancel.setEnabled(true);
        optManager.setEnabled(false);
        optTechnician.setEnabled(false);
    }//GEN-LAST:event_btnDeleteUserActionPerformed
    /* Gère l'affichage des rôles par utilisateur lorsque le bouton de 
     * modification de rôle est appuyé
     */
    private void btnChangeRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeRoleActionPerformed
        int index = tblRoleManager.getSelectedRow();
        User au = (User) lstAcceptedUsers.get(index);
        if (au.getRole().equals(MANAGER_ROLE) && optTechnician.isSelected()) {
            au.setRole(TECHNICIAN_ROLE);
        }
        if (au.getRole().equals(TECHNICIAN_ROLE) && optManager.isSelected()) {
            au.setRole(MANAGER_ROLE);
        }
        if (au.getRole().equals(NO_ROLE)) {
            if (optManager.isSelected()) {
                au.setRole(MANAGER_ROLE);
            }
            if (optTechnician.isSelected()) {
                au.setRole(TECHNICIAN_ROLE);
            }
        }
        displayUserLists();
        btnChangeRole.setEnabled(false);
        btnSave.setEnabled(true);
        btnCancel.setEnabled(true);
        optManager.setEnabled(false);
        optTechnician.setEnabled(false);
    }//GEN-LAST:event_btnChangeRoleActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        loadUserList();
        loadUserSublists();
        displayUserLists();
        loadRepairList();
        loadRepairSubLists();
        displayRepairLists();
        btnCancel.setEnabled(false);
        btnSave.setEnabled(false);
        optManager.setEnabled(false);
        optTechnician.setEnabled(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        int index = tblPaid.getSelectedRow();
        Repair r = lstPaidRepairs.get(index);
        r.setIsFree(FREE_REPAIR);
        lstFreeRepairs.add(r);
        lstPaidRepairs.remove(index);
        btnAdd.setEnabled(false);
        btnCancel.setEnabled(true);
        btnSave.setEnabled(true);
        displayRepairLists();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int index = tblFree.getSelectedRow();
        Repair r = lstFreeRepairs.get(index);
        r.setIsFree(PAID_REPAIR);
        lstPaidRepairs.add(r);
        lstFreeRepairs.remove(index);
        btnRemove.setEnabled(false);
        btnCancel.setEnabled(true);
        btnSave.setEnabled(true);
        displayRepairLists();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void tblPaidMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPaidMouseClicked
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_tblPaidMouseClicked

    private void tblFreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFreeMouseClicked
        btnRemove.setEnabled(true);
    }//GEN-LAST:event_tblFreeMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChangeRole;
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnRefuse;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroupRoles;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private java.awt.Label label1;
    private javax.swing.JLabel lblAccessRequests;
    private javax.swing.JLabel lblExceptionManager;
    private javax.swing.JLabel lblFree;
    private javax.swing.JLabel lblMaster;
    private javax.swing.JLabel lblPaid;
    private javax.swing.JLabel lblRepair;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblRoleManager;
    private javax.swing.JLabel lblUserManager;
    private javax.swing.JMenuBar mnuAdmin;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuLogout;
    private javax.swing.JMenuItem mnuQuit;
    private javax.swing.JRadioButton optManager;
    private javax.swing.JRadioButton optTechnician;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlExceptionManager;
    private javax.swing.JPanel pnlFree;
    private javax.swing.JPanel pnlListLayout;
    private javax.swing.JPanel pnlPayable;
    private javax.swing.JPanel pnlUserManager;
    private javax.swing.JScrollPane scpAccessRequests;
    private javax.swing.JScrollPane scpFree;
    private javax.swing.JScrollPane scpPaid;
    private javax.swing.JScrollPane scpRoleManager;
    private javax.swing.JSeparator sepExceptionManager;
    private javax.swing.JSeparator sepRepMas;
    private javax.swing.JSeparator sepSubPanels;
    private javax.swing.JSeparator sepUserManager;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblAccessRequests;
    private javax.swing.JTable tblFree;
    private javax.swing.JTable tblPaid;
    private javax.swing.JTable tblRoleManager;
    // End of variables declaration//GEN-END:variables

    //Charge la liste de tous les utilisateurs qui se trouvent dans la bdd
    private void loadUserList() {
        try {
            lstUsers = new ListeObjects<User>(base.UserDao.getUsers());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Cette methode permet de stocker un utilisateur non enregistré dans la bdd
     * en attendant d'être validé ou refusé par le manager.
     *
     * @param u est l'utilisateur qui demande accès
     */
    protected void addUserRequest(User u) {
        try {
            UserDao.addUser(u);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        loadUserList();
        loadUserSublists();
        displayUserLists();
    }

    //Affiche les utilisateurs dans les tables
    private void displayUserLists() {
        reqModel.setRowCount(0);
        acsModel.setRowCount(0);
        if (lstPendingUsers.size() > 0) {
            for (int i = 0; i < lstPendingUsers.size(); i++) {
                User u = (User) lstPendingUsers.get(i);
                reqModel.insertRow(i, new Object[]{u.getFirstname(), u.getLastname(), u.getUsername(), u.getEmail()});
            }
        }
        for (int i = 0; i < lstAcceptedUsers.size(); i++) {
            User u = (User) lstAcceptedUsers.get(i);
            acsModel.insertRow(i, new Object[]{u.getLastname(), u.getFirstname(), u.getUsername(), u.getEmail(), u.getRole()});
        }
    }

    //Remplit les listes spécifiques d'utilisateurs enregistrés et en attente d'enregistrement
    private void loadUserSublists() {
        lstPendingUsers.clear();
        lstAcceptedUsers.clear();
        for (int i = 0; i < lstUsers.size(); i++) {
            User u = (User) lstUsers.get(i);
            if (u.getStatus().equals(UNREGISTERED)) {
                lstPendingUsers.add(u);
            } else if (u.getStatus().equals(REGISTERED)) {
                lstAcceptedUsers.add(u);
            }
        }
    }

    //Charge la liste de toutes les réparations qui se trouvent dans la bdd
    private void loadRepairList() {
        try {
            lstRepairs = new ListeObjects<Repair>(base.RepairDao.getRepairs());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    //Affiche les réparations dans les tables
    private void displayRepairLists() {
        freeModel.setRowCount(0);
        paidModel.setRowCount(0);
        for (int i = 0; i < lstFreeRepairs.size(); i++) {
            Repair fr = (Repair) lstFreeRepairs.get(i);
            freeModel.insertRow(i, new Object[]{VENDOR_COUNTRY + VENDOR_ID + "" + fr.getRepairNo(), fr.getOwner()});
        }
        for (int i = 0; i < lstPaidRepairs.size(); i++) {
            Repair pr = (Repair) lstPaidRepairs.get(i);
            paidModel.insertRow(i, new Object[]{VENDOR_COUNTRY + VENDOR_ID + "" + pr.getRepairNo(), pr.getOwner()});
        }
    }

    //Remplit les listes spécifiques de réparations payantes et gratuites
    private void loadRepairSubLists() {
        lstFreeRepairs.clear();
        lstPaidRepairs.clear();
        for (int i = 0; i < lstRepairs.size(); i++) {
            Repair r = (Repair) lstRepairs.get(i);
            if (r.getIsFree().equals(FREE_REPAIR)) {
                lstFreeRepairs.add(r);
            } else {
                lstPaidRepairs.add(r);
            }
        }
        if (lstPaidRepairs.isEmpty()) {
            btnAdd.setEnabled(false);
        } else if (lstFreeRepairs.isEmpty()) {
            btnRemove.setEnabled(false);
        }
    }

    //Supprime de la bdd les utilisateurs spécifiés
    private void removeUsers() {
        for (int i = 0; i < lstRemovedUsers.size(); i++) {
            User u = (User) lstRemovedUsers.get(i);
            try {
                UserDao.deleteUser(u);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    //Met a jour le role d'un utilisateur dans la bdd
    private void updateExistingUsers() {
        //checkLists();
        for (int i = 0; i < lstUsers.size(); i++) {
            for (int j = 0; j < lstAcceptedUsers.size(); j++) {
                User u = (User) lstUsers.get(i);
                User au = (User) lstAcceptedUsers.get(j);
                try {
                    UserDao.updateExistingUser(au);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    // Met a jour le cout total d'une réparation dans la bdd
    private void updateRepairCosts() {
        for (int i = 0; i < lstRepairs.size(); i++) {
            Repair r = (Repair) lstRepairs.get(i);
            for (int j = 0; j < lstFreeRepairs.size(); j++) {
                Repair fr = (Repair) lstFreeRepairs.get(j);
                if (r.getRepairNo() == fr.getRepairNo()) {
                    try {
                        RepairDao.updateRepairCost(fr);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }

            }
            for (int j = 0; j < lstPaidRepairs.size(); j++) {
                Repair pr = (Repair) lstPaidRepairs.get(j);
                if (r.getRepairNo() == pr.getRepairNo()) {
                    try {
                        RepairDao.updateRepairCost(pr);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }

        }
    }

    //Initialisation des composants (suite)
    private void initTheRest() {
        optManager.setEnabled(false);
        optTechnician.setEnabled(false);
        btnAdd.setEnabled(false);
        btnRemove.setEnabled(false);
        btnAccept.setEnabled(false);
        btnRefuse.setEnabled(false);
        btnDeleteUser.setEnabled(false);
        freeModel = (DefaultTableModel) tblFree.getModel();
        paidModel = (DefaultTableModel) tblPaid.getModel();
        acsModel = (DefaultTableModel) tblRoleManager.getModel();
        reqModel = (DefaultTableModel) tblAccessRequests.getModel();
        loadUserList();
        loadUserSublists();
        displayUserLists();
        loadRepairList();
        loadRepairSubLists();
        displayRepairLists();
    }

    //Affiche la mise à jour des utilisateurs à des fins de controle 
    /*private void checkLists() {
    for (int i = 0; i < lstUsers.size(); i++) {
    User u = (User) lstUsers.get(i);
    System.out.println(u.getLastname() + " " + u.getRole());
    }
    for (int i = 0; i < lstAcceptedUsers.size(); i++) {
    User u = (User) lstAcceptedUsers.get(i);
    System.out.println(u.getLastname() + " " + u.getRole());
    }
    }*/

}
