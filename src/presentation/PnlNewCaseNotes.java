package presentation;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import javax.swing.BorderFactory;
import javax.swing.border.Border;

/**
 *
 * @author Thery Ehrlich
 * 
 * Information d'ordre général : 
 * Les methodes keyPressed, keyReleased, focusGained et focusLost gèrent pour chaque champ 
 * le placement et la suppression des placeholders qui sont gérés par une classe 
 * centrale PlaceholderControl.java
 * 
 */
public class PnlNewCaseNotes extends javax.swing.JPanel {

    public static final String EMPTY_FIELDS_ERROR = "Veuillez remplir tous les champs requis";

    PnlCase parent;
    Component[] newNoteComponents;
    PnlNewPartsSelection pnlUserInfo;

    /**
     * Creates new form PnlNewCaseNotes
     * @param parent
     */
    public PnlNewCaseNotes(PnlCase parent) {
        initComponents();
        this.parent = parent;
        newNoteComponents = new Component[]{taProblem, taStepsToRep, taCosmetics, taAddNotes, taSolution};
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlNewNotes = new javax.swing.JPanel();
        lblProblem = new javax.swing.JLabel();
        scpProblem = new javax.swing.JScrollPane();
        taProblem = new javax.swing.JTextArea();
        lblStepsToRep = new javax.swing.JLabel();
        scpStepsToRep = new javax.swing.JScrollPane();
        taStepsToRep = new javax.swing.JTextArea();
        lblComestics = new javax.swing.JLabel();
        scpComestics = new javax.swing.JScrollPane();
        taCosmetics = new javax.swing.JTextArea();
        lblAdditionalNotes = new javax.swing.JLabel();
        scpAdditionalNotes = new javax.swing.JScrollPane();
        taAddNotes = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();
        lblErrorMsg = new javax.swing.JLabel();
        lblSolution = new javax.swing.JLabel();
        scpSolution = new javax.swing.JScrollPane();
        taSolution = new javax.swing.JTextArea();
        btnCancel = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(361, 412));
        setPreferredSize(new java.awt.Dimension(361, 412));

        pnlNewNotes.setBackground(new java.awt.Color(204, 204, 204));
        pnlNewNotes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        pnlNewNotes.setAlignmentX(0.0F);
        pnlNewNotes.setAlignmentY(0.0F);
        pnlNewNotes.setMinimumSize(new java.awt.Dimension(181, 400));
        pnlNewNotes.setName(""); // NOI18N
        pnlNewNotes.setPreferredSize(new java.awt.Dimension(181, 400));
        pnlNewNotes.setRequestFocusEnabled(false);

        lblProblem.setDisplayedMnemonic('o');
        lblProblem.setLabelFor(taProblem);
        lblProblem.setText("Problème");

        taProblem.setColumns(20);
        taProblem.setLineWrap(true);
        taProblem.setRows(5);
        taProblem.setWrapStyleWord(true);
        taProblem.setAutoscrolls(false);
        taProblem.setMinimumSize(new java.awt.Dimension(165, 95));
        taProblem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taProblemKeyPressed(evt);
            }
        });
        scpProblem.setViewportView(taProblem);

        lblStepsToRep.setDisplayedMnemonic('r');
        lblStepsToRep.setLabelFor(taStepsToRep);
        lblStepsToRep.setText("Etapes pour reproduire");
        lblStepsToRep.setDisplayedMnemonicIndex(12);

        taStepsToRep.setColumns(20);
        taStepsToRep.setRows(5);
        taStepsToRep.setAutoscrolls(false);
        taStepsToRep.setMinimumSize(new java.awt.Dimension(165, 95));
        taStepsToRep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taStepsToRepKeyPressed(evt);
            }
        });
        scpStepsToRep.setViewportView(taStepsToRep);

        lblComestics.setDisplayedMnemonic('c');
        lblComestics.setLabelFor(taCosmetics);
        lblComestics.setText("Etat cosmétique");

        taCosmetics.setColumns(20);
        taCosmetics.setRows(5);
        taCosmetics.setAutoscrolls(false);
        taCosmetics.setMinimumSize(new java.awt.Dimension(165, 95));
        taCosmetics.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taCosmeticsKeyPressed(evt);
            }
        });
        scpComestics.setViewportView(taCosmetics);

        lblAdditionalNotes.setDisplayedMnemonic('s');
        lblAdditionalNotes.setLabelFor(taAddNotes);
        lblAdditionalNotes.setText("Notes supplémentaires (optionel)");
        lblAdditionalNotes.setDisplayedMnemonicIndex(6);

        taAddNotes.setColumns(20);
        taAddNotes.setRows(5);
        taAddNotes.setAutoscrolls(false);
        taAddNotes.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[] {taProblem, taStepsToRep, taCosmetics, taAddNotes, btnSave}));
        taAddNotes.setMinimumSize(new java.awt.Dimension(166, 96));
        taAddNotes.setName(""); // NOI18N
        taAddNotes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taAddNotesKeyPressed(evt);
            }
        });
        scpAdditionalNotes.setViewportView(taAddNotes);

        btnSave.setMnemonic('E');
        btnSave.setText("Enregistrer");
        btnSave.setToolTipText("");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        btnSave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSaveKeyPressed(evt);
            }
        });

        lblErrorMsg.setFocusTraversalPolicyProvider(true);

        lblSolution.setDisplayedMnemonic('s');
        lblSolution.setLabelFor(taAddNotes);
        lblSolution.setText("Solution de service");

        taSolution.setColumns(20);
        taSolution.setRows(5);
        taSolution.setAutoscrolls(false);
        taSolution.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[] {taProblem, taStepsToRep, taCosmetics, taAddNotes, btnSave}));
        taSolution.setMinimumSize(new java.awt.Dimension(166, 96));
        taSolution.setName(""); // NOI18N
        taSolution.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taSolutionKeyPressed(evt);
            }
        });
        scpSolution.setViewportView(taSolution);

        btnCancel.setText("Annuler");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNewNotesLayout = new javax.swing.GroupLayout(pnlNewNotes);
        pnlNewNotes.setLayout(pnlNewNotesLayout);
        pnlNewNotesLayout.setHorizontalGroup(
            pnlNewNotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNewNotesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNewNotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNewNotesLayout.createSequentialGroup()
                        .addComponent(lblErrorMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)
                        .addGap(24, 24, 24))
                    .addGroup(pnlNewNotesLayout.createSequentialGroup()
                        .addGroup(pnlNewNotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(scpSolution, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scpAdditionalNotes, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scpComestics, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scpStepsToRep, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProblem, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAdditionalNotes, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStepsToRep, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblComestics, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSolution, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scpProblem, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(27, 27, 27))))
        );
        pnlNewNotesLayout.setVerticalGroup(
            pnlNewNotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNewNotesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblProblem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpProblem, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStepsToRep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpStepsToRep, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblComestics)
                .addGap(5, 5, 5)
                .addComponent(scpComestics, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAdditionalNotes)
                .addGap(10, 10, 10)
                .addComponent(scpAdditionalNotes, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNewNotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlNewNotesLayout.createSequentialGroup()
                        .addComponent(lblSolution)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scpSolution, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlNewNotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblErrorMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pnlNewNotes, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlNewNotes, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Récupère les saisies d'une note et les ajoute a la réparation (à
     * développer) *
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (validData()) {
            String note = formatNote();
            this.setVisible(false);
            //parent.displayPermaNote();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void taProblemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taProblemKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            taStepsToRep.requestFocusInWindow();
            evt.consume();
        }
    }//GEN-LAST:event_taProblemKeyPressed

    private void taStepsToRepKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taStepsToRepKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            taCosmetics.requestFocusInWindow();
            evt.consume();
        }
    }//GEN-LAST:event_taStepsToRepKeyPressed

    private void taCosmeticsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taCosmeticsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            taAddNotes.requestFocusInWindow();
            evt.consume();
        }
    }//GEN-LAST:event_taCosmeticsKeyPressed

    private void taAddNotesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taAddNotesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            taSolution.requestFocusInWindow();
            evt.consume();
        }
    }//GEN-LAST:event_taAddNotesKeyPressed

    //Enregistre une note saisie
    private void btnSaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSaveKeyPressed
       //A developper
    }//GEN-LAST:event_btnSaveKeyPressed

    private void taSolutionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taSolutionKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            btnSave.requestFocusInWindow();
            evt.consume();
        }
    }//GEN-LAST:event_taSolutionKeyPressed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel lblAdditionalNotes;
    private javax.swing.JLabel lblComestics;
    private javax.swing.JLabel lblErrorMsg;
    private javax.swing.JLabel lblProblem;
    private javax.swing.JLabel lblSolution;
    private javax.swing.JLabel lblStepsToRep;
    private javax.swing.JPanel pnlNewNotes;
    private javax.swing.JScrollPane scpAdditionalNotes;
    private javax.swing.JScrollPane scpComestics;
    private javax.swing.JScrollPane scpProblem;
    private javax.swing.JScrollPane scpSolution;
    private javax.swing.JScrollPane scpStepsToRep;
    private javax.swing.JTextArea taAddNotes;
    private javax.swing.JTextArea taCosmetics;
    private javax.swing.JTextArea taProblem;
    private javax.swing.JTextArea taSolution;
    private javax.swing.JTextArea taStepsToRep;
    // End of variables declaration//GEN-END:variables

    protected Component[] getNewNoteComponents() {
        return newNoteComponents;
    }

    /* Valide les données saisies dans les text areas une note */
    private boolean validData() {
        boolean isValid = true;
        Border errordBdr = BorderFactory.createMatteBorder(1, 5, 1, 1, Color.red);
        if (taProblem.getText().length() == 0) {
            isValid = false;
            scpProblem.setBorder(errordBdr);
        }
        if (taStepsToRep.getText().length() == 0) {
            isValid = false;
            scpStepsToRep.setBorder(errordBdr);
        }
        if (taCosmetics.getText().length() == 0) {
            isValid = false;
            scpComestics.setBorder(errordBdr);
        }
        if (taSolution.getText().length() == 0) {
            isValid = false;
            scpSolution.setBorder(errordBdr);
        }
        if (isValid == false) {
            lblErrorMsg.setText(EMPTY_FIELDS_ERROR);
            lblErrorMsg.setForeground(Color.red);
        }
        return isValid;
    }

    /* Formate le texte saisi dans les différents champs en un bloc de texte 
     * consolidé 
     */
    private String formatNote() {
        String problem = taProblem.getText();
        String stepsToRep = taStepsToRep.getText();
        String cosmetics = taCosmetics.getText();
        String addNotes = taAddNotes.getText();
        String solution = taSolution.getText();
        if (taProblem.getText().length() > 0) {
            problem = "Problème:\n\r" + taProblem.getText() + "\r\n\n\r";
        }
        if (taStepsToRep.getText().length() > 0) {
            stepsToRep = "Etapes pour reproduire:\n\r" + taStepsToRep.getText() + "\r\n\n\r";
        }
        if (taCosmetics.getText().length() > 0) {
            cosmetics = "Etat cosmétique:\n\r" + taCosmetics.getText() + "\r\n\n\r";
        }
        if (taAddNotes.getText().length() > 0) {
            addNotes = "Notes suplémentaires:\n\r" + taAddNotes.getText() + "\r\n\n\r";
        }
        if (taAddNotes.getText().length() > 0) {
            solution = "Solution de service:\n\r" + taAddNotes.getText() + "\r\n\n\r";
        }
        return problem + stepsToRep + cosmetics + addNotes + solution;
    }

    public Component getTaProblem() {
        return taProblem;
    }

    void setUserInfo(PnlNewPartsSelection p2) {
        pnlUserInfo = p2;
    }

}
